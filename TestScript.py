import pickle
import base64
import sys
import subprocess
import time

YOUR_BASEPATH = ''

def info(s):
    print('[Info] {}'.format(s))

def fatal(s):
    print('[FATAL ERROR] {}'.format(s))
    sys.exit(0)

def judge(testcase):
    process = subprocess.Popen(['make', 'build'], cwd=YOUR_BASEPATH, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, stdin=subprocess.PIPE)
    build_timeout = 5
    testname, inputctx, retcode, inputcode = testcase
    process.communicate(inputcode)
    start_time = time.time()
    while process.poll() is not None and time.time() - start_time < build_timeout:
        pass
    try:
        process.terminate()
    except Exception as identifier:
        info('Terminating processing with following error: {}'.format(identifier))
    process = subprocess.Popen(['make', 'simulate'], cwd=YOUR_BASEPATH, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, stdin=subprocess.PIPE)
    simulating_timeout = 10
    process.communicate(inputctx + '\n')
    start_time = time.time()
    while process.poll() is not None and time.time() - start_time < simulating_timeout:
        pass
    try:
        process.terminate()
    except Exception as identifier:
        info('Terminating processing with following error: {}'.format(identifier))
    user_ret = process.returncode
    if user_ret == retcode:
        print('[PASS] {}'.format(testname))
        return True
    else:
        print('[FAIL] {}'.format(testname))
        return False
    

testdata = ""

test_cases = pickle.loads(base64.b64decode(testdata.encode()))
info('Test cases count: {}'.format(len(test_cases)))
if len(YOUR_BASEPATH) == 0:
    fatal('Base path error.')

for i in test_cases:
    result = judge(i)
    if not result:
        print('TEST FAILED')
        sys.exit(0)

print('PASSED ALL')