import pickle
import base64
import sys
import subprocess
import time

YOUR_BASEPATH = '/Users/zhengwenxin/Documents/Projects/BASIC-Compiler/ut'
VERBOSE = False

def info(s):
    print('[Info] {}'.format(s))

def fatal(s):
    print('[FATAL ERROR] {}'.format(s))
    sys.exit(0)

def judge(testcase):
    build_timeout = 5
    testname, inputctx, retcode, inputcode = testcase
    if VERBOSE:
        print('[Verbose] =======Build Stage START =======')
        process = subprocess.run(['make', 'build'], input=inputcode.encode(), cwd=YOUR_BASEPATH, timeout=build_timeout)
    else:
        process = subprocess.run(['make', 'build'], input=inputcode.encode(), cwd=YOUR_BASEPATH, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=build_timeout)
    print('[Verbose] =======Build Stage FINISH=======\n') if VERBOSE else None
    
    if process.returncode != 0 and retcode == -1:
        print('[PASS] {}'.format(testname))
        return True
    elif retcode == -1:
        print('[FAIL] {}, std: fail to compile'.format(testname))
        return False

    if process.returncode != 0:
        fatal('Unable to build with build stage exitcode: {}'.format(process.returncode))
    if VERBOSE:
        print('[Verbose] =======Simulation Stage START =======')
        process = subprocess.run(['make', 'simulate'], input=(inputctx + '\n').encode(), cwd=YOUR_BASEPATH, timeout=build_timeout)
    else:
        process = subprocess.run(['make', 'simulate'], input=(inputctx + '\n').encode(), cwd=YOUR_BASEPATH, stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, timeout=build_timeout)

    print('[Verbose] =======Simulation Stage FINISH=======\n') if VERBOSE else None

    user_ret = process.returncode
    if user_ret == retcode:
        print('[PASS] {}'.format(testname))
        return True
    else:
        print('[FAIL] {}, std_ret: {}, your_ret: {}'.format(testname, retcode, user_ret))
        return False
    

testdata = ""

test_cases = pickle.loads(base64.b64decode(testdata.encode()))
info('Test cases count: {}'.format(len(test_cases)))
if len(YOUR_BASEPATH) == 0:
    fatal('Base path error.')

for i in test_cases:
    result = judge(i)
    if not result:
        print('TEST FAILED')
        sys.exit(0)

print('PASSED ALL')